package com.dev.air.module.impl.exploit;

import com.dev.air.event.api.SendTypeEvent;
import com.dev.air.event.impl.client.ValueUpdateEvent;
import com.dev.air.event.impl.packet.PacketReceiveEvent;
import com.dev.air.event.impl.packet.PacketSendEvent;
import com.dev.air.event.impl.packet.update.PreMotionEvent;
import com.dev.air.module.api.Category;
import com.dev.air.module.api.Module;
import com.dev.air.module.api.annotation.ModuleInfo;
import com.dev.air.util.klass.ClassFinder;
import com.dev.air.util.math.MathUtil;
import com.dev.air.util.packet.PacketUtil;
import com.dev.air.util.packet.other.PacketMapping;
import com.dev.air.value.impl.BooleanValue;
import com.dev.air.value.impl.ListModeValue;
import com.dev.air.value.impl.ModeValue;
import net.lenni0451.asmevents.event.Target;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.util.Vec3;

import java.util.Map;
import java.util.Set;
import java.util.UUID;

@ModuleInfo(name = "Disabler", description = "Partially disable anticheat", category = Category.EXPLOIT)
public class DisablerMod extends Module {

    private ModeValue mode = new ModeValue("Mode", "None", "None", "Verus Recode", "Ping Duplicate", "Invalid Ping");
    private ListModeValue receivePacketToCancel = new ListModeValue("Receive packet to cancel");
    private ListModeValue sendPacketToCancel = new ListModeValue("Send packet to cancel");
    private BooleanValue stopStartSprint = new BooleanValue("Omni Sprint", false);
    private BooleanValue stopStartSneak = new BooleanValue("No Sneak", false);
    private BooleanValue spectate = new BooleanValue("Spectate", false);
    private BooleanValue abilities = new BooleanValue("Abilities", false);
    private BooleanValue input = new BooleanValue("Input", false);

    private Vec3 lastPosition;

    @Override
    public void setup() {
        super.setup();

        for (Map.Entry<Class, String> entry : PacketMapping.inPackets.entrySet())
            receivePacketToCancel.getModes().add(new ListModeValue.ModeState(receivePacketToCancel, entry.getValue()));

        for (Map.Entry<Class, String> entry : PacketMapping.outPackets.entrySet())
            sendPacketToCancel.getModes().add(new ListModeValue.ModeState(sendPacketToCancel, entry.getValue()));
    }

    @Override
    public void onEnable() {
        lastPosition = null;
        if (mc.player != null) lastPosition = mc.player.getPositionVector();
    }

    @Target
    public void onPreMotion(PreMotionEvent event) {
        if (spectate.isEnabled()) PacketUtil.sendNo(new C18PacketSpectate(UUID.randomUUID()));
        if (abilities.isEnabled()) {
            PlayerCapabilities capabilities = new PlayerCapabilities();
            capabilities.allowFlying = capabilities.isFlying = true;
            PacketUtil.sendNo(new C13PacketPlayerAbilities(capabilities));
        }
        if (input.isEnabled()) PacketUtil.sendNo(new C0CPacketInput());
    }

    @Target
    public void onPacketReceive(PacketReceiveEvent event) {
        if (mc.player == null || mc.player.ticksExisted < 20) return;

        String klassName = PacketMapping.inPackets.get(event.getPacket().getClass());
        if (receivePacketToCancel.getEnabledModes().contains(klassName)) {
            event.setCancelled(true);
        }

        if (mode.is("Verus Recode")) {
            /* works the same as cancelling transaction, except we sending old one or invalid one that not the one use for combat checks
                    so it won't flag BadPackets/Pingspoof check (delay for too long).
             */
            if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                event.setPacket(new S32PacketConfirmTransaction(0, (short) (Math.random() > 0.5 ? 0 : -5), false));
            }
        }

        if (mode.is("Ping Duplicate")) {
            if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                event.setCancelled(true);
                PacketUtil.receiveNo(event.getPacket());
                PacketUtil.receiveNo(event.getPacket());
            }
        }

        if (mode.is("Invalid Ping")) {
            if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                event.setPacket(new S32PacketConfirmTransaction(0, (short) MathUtil.randomNormal(0, 100), false));
            }
        }
    }

    @Target
    public void onValueUpdate(ValueUpdateEvent event) {
        if (event.getValue() == stopStartSprint && stopStartSprint.isEnabled()) {
            if (mc.player.isSprinting())
                PacketUtil.sendNo(new C0BPacketEntityAction(mc.player, C0BPacketEntityAction.Action.STOP_SPRINTING));
        }

        if (event.getValue() == stopStartSprint && stopStartSneak.isEnabled()) {
            if (mc.player.isSneaking())
                PacketUtil.sendNo(new C0BPacketEntityAction(mc.player, C0BPacketEntityAction.Action.STOP_SNEAKING));
        }
    }

    @Target
    public void onPacketSend(PacketSendEvent event) {
        if (lastPosition == null) lastPosition = mc.player.getPositionVector();

        String klassName = PacketMapping.outPackets.get(event.getPacket().getClass());
        if (sendPacketToCancel.getEnabledModes().contains(klassName)) {
            event.setCancelled(true);
        }

        if (event.getPacket() instanceof C0BPacketEntityAction) {
            C0BPacketEntityAction wrapper = (C0BPacketEntityAction) event.getPacket();

            if (stopStartSprint.isEnabled()) {
                if (wrapper.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || wrapper.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                    event.setCancelled(true);
                }
            }

            if (stopStartSneak.isEnabled()) {
                if (wrapper.getAction() == C0BPacketEntityAction.Action.START_SNEAKING || wrapper.getAction() == C0BPacketEntityAction.Action.STOP_SNEAKING) {
                    event.setCancelled(true);
                }
            }
        }
    }

}
